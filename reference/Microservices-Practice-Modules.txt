Module Summary Notes practice
===============================

Module 1: Main Microservices Architecture and tools needed
   

Module 3:  Create microservice -> employee-service 
        1) https://start.spring.io/ ( Spring initializr )
          - Web/JPA/H2/Config-client/actuator/devtools
          - Update Pom for boot and cloud version compatibility
             Spring boot starter - 1.5.2.Release
             Spring cloud        - Dalston.RELEASE
     
        2) @RestController / @GetMapping / @PathVariable
           Controller and Model class --EmployeeController & Employee
           
        3) - Use JPA and mark the Model ans entity Bean
              @Entity
              @Column(name="column_name) / @Id
              constructor with fields + default constructor
           
           - Create an Interface - Employee Repository
             public interface EmployeeRepository extends JpaRepository<Employee,Long> {}
               Long represents the ID Field of the Entity
               JpaRepository provides CRUD implementations
           
           - @GetMapping("/employee/{empId}")
	             public Employee getEployeeDetails(@PathVariable Long empId)
	                {
	                	return employeeRepository.findOne(empId); 
	                }
        4) data.sql with insert query to load into H2 DB
            insert into employee (emp_id,first_name,last_name,date_of_joining) values (101,'F001','L001',sysdate());

           
     
Module 4: Create microservice -> role-service
             - RoleRepository custom findByroleName()
               public Role findByRoleName(String roleName);
	       
	     - http://localhost:8061/h2-console
                jdbc:h2:mem:testdb
      
Module 5: Create composite microservice -> payroll-service
           - insert to payroll table with if valid employee and role fetched
	   - Payroll Model also has payrollId
	 4)  - Rest Templates.
	     - payroll ID marked as @GeneratedValue
	     - employee service and role service are called using the RestTemplate.getForEntity()
               ( important to kee same naming comvention in the payroll Entity to create right mapping )
               So payroll Entity is close to the role and employee entity attribute naming wise.
               ======================
	        ResponseEntity<Payroll> forEmpEntity = new RestTemplate().getForEntity(
				"http://localhost:8060/employee/{empId}",Payroll.class,empId);
		Payroll empPayroll = forEmpEntity.getBody();
		
		ResponseEntity<Payroll> forRoleEntity = new RestTemplate().getForEntity(
				"http://localhost:8061/role/{roleName}",Payroll.class,roleName);
		
		empPayroll.setRoleId(forRoleEntity.getBody().getRoleId());
		empPayroll.setRoleName(forRoleEntity.getBody().getRoleName());
		empPayroll.setRoleDescription(forRoleEntity.getBody().getRoleDescription());
		payrollRepository.save(empPayroll);
               =======================
	   
	   
Module 6: FEIGN Template ( Netflix ) Rest API calls
         Feign integrates with Ribbon and Eureka

        i) add spring dependency in pom :
           <groupId>org.springframework.cloud</groupId>
           <artifactId>spring-cloud-starter-feign</artifactId>

        ii) Update BootMain Application with 
             @EnableFeignClients("com.ansa.payroll")  // package to scan for feign clients

	iii) Make a Feign Client Interface - which will replace the Rest Template
             
             @FeignClient(name="employee-service",url="http://localhost:8060")
             public interface EmployeeServiceFeignTemplate {
		@GetMapping("/employee/{empId}")
	        public Payroll getEmployeeDetails(@PathVariable("empId") Long empId);
                }
             ** note the @PathVariable("empId")
             ** note the return type is an TransferBeanType Entity similar to employee Entity
                  Payroll Entity has all same attributes as Employee Entity ( same naming of variables )
   
Module 7: RIBBON for **CLIENT SIDE** Load balancing
          RIBBON cannot pick dynamic servers which are active/inactive -Eureka solves in next mod
          Say 2 instances of employee-Service , we dont need to hardcode the host in the 
           @FeignClient(name="employee-service",url="http://localhost:8060") -- this will now change
	   
	   i) pom dependency addition
               <groupId>org.springframework.cloud</groupId>
               <artifactId>spring-cloud-starter-ribbon</artifactId>
	   
           ii) Feign Client change
               @FeignClient(name="employee-service") // no more URL
               @RibbonClient(name="employee-service")
	       public interface EmployeeServiceFeignClient {
        
	   iii) application.properties ( list of servers)
                employee-service.ribbon.listOfServers=http://localhost:8060,http://localhost:8160
		role-service.ribbon.listOfServers=http://localhost:8061,http://localhost:8161
		
          iv) a) for Employee entity add port as an attribute
              b) for Payroll entity add port as an attribute ( so it maps to employee while fetching value)
	      c) in data.sql add port as a column
              d) Update the PayrollController to return type Long to capture port number instead of void for the POST
	      e) For instances of employeeServiceController
                   @Autowired
                   Environment env;
                   .. empResponse.setPort(env.getProperty("local.server.port"));
		      

Module 8: EUREKA - Naming Discovery Server [use PORT 8761 ] Otherwise some problems..
          i) spring initialzr -> eureka-server,actuator,devtool,config client
	  ii) Update spring boot version ( 1.5.2.RELEASE ) / Spring cloud (Dalston.RELEASE)
               version artifact name is: ( not the netflix version in Dalston )
                 <artifactId>spring-cloud-starter-eureka-server</artifactId>
		 
          iv) application.properties
             spring.application.name=eureka-server
             server.port=8761
	     eureka.client.register-with-eureka=false  // dont register server with itself as a client ( boot app )
	     eureka.client.fetch-registry=false
	     
	  v) @EnableEurekaServer in spring boot main class
	  
	  vi) CLIENT SIDE CONFIGURATION to register to eureka
	     a) Client boot app update pom:
                <artifactId>spring-cloud-starter-eureka</artifactId>
             b) Register Client Spring boot main app to Eureka Server
                @EnableDiscoveryClient in the main class
		
             c) application.properties
                 eureka.client.service-url.default-zone= http://localhost:8050/eureka
		 
                 also we no longer nee to keep the 
                   role-service.ribbon.list-of-servers  etc can be eliminated
                  Ribbon CLinet is integrated with eureka server to fetch services based of the service name.

Module 9: ZUUL API Gateway
          SLEUTH - How API gateway can also provide cross-cutting functionalities like Logging filters ( pre )
	  i) spring initializr - actuator/devtools/zuul/eureka discovery
	  ii) version boot 1.5.2.RELEASE / cloud - Dalston.RELEASE
              remove the netflix version artifacts for zuul/eureka discovery like Module 7.
	      
	 iii) @EnableZuulProxy  ( to the main spring boot application )
              @EnableDiscoveryClient ( to register with eureka )
	     
	  iv) application.properties
              spring.application.name-zuul-edge-server
	      server.port=7040
	      eureka.client.service-url.default-zone=http://localhost:8761/eureka
	      
	      zuul-edge-server.host.connect-timeout-millis=5000
	      zuul-edge-server.host.socket-timeout-millis=5000
	      hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
	      
	      
	  v) Cross Cutting functionality ZuulLogginFilter
	  
	     @Component
	     class ZuulLoggingFilter extends ZuulFilter {
	     private static Logger log = LoggerFactory.getLogger(ZuulLoggingFilter.class);
	     @Override
	       boolean shouldFilter(){ return true; }
	       String FilterType(){ return "pre";} // Pre Route / Post route / Error / Route
	       Object run() throws ZuulException // core logic
                { RequestContext rctx = RequestContext.getCurrentContext();
		  HttpServletRequest req = ctx.getRequest();
		  log.info(req.getMethod  + req.getRequestURL());
		  retun null;
		  }
	       
	       int FilterOrder(){ return 1;  }
	     }
	      
	  vi) to call the service via zuul gateway redirect via zuul server port and then the underlying service name
	      http://localhost:7040/role-service/role/hr
                     instead of
              http://localhost:7061/role/hr
	      
	 vii) Making one MS call another MS via zuul ( e.g payroll-service to call role-service / employee-service )
	     a)  Feign Client change
               XX  @FeignClient(name="employee-service") // no more talk to service directly but via Zuul
	       @FeignClient(name="zuul-edge-server") // no more talk to service directly but via Zuul
               @RibbonClient(name="employee-service")
	       public interface EmployeeServiceFeignClient {
  
	       @GetMapping("/employee-service/employee/{empId}") // here prefix with the service name now
	        public Payroll getEmployeeDetails(@PathVariable("empId") Long empId);
		 ..
		 
	  
Module 10: Distributed Tracing :  SLEUTH  + ZIPKIN server
             SLEUTH - SERVICE_NAME,SPANID,CORRELATIONID,false
	     
	     MS Clients configuration ( ROLE-service / employee-service / payroll-service )
	     -------------------------
	  i) POM dependency:
  	        <groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-starter-sleuth</artifactId>  // to generate sleuth based logging
		
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-sleuth-zipkin</artifactId>  // to send logs to Zipkin Server
             

         ii) Each service to have its corresponding Logging which gets added with sleuth
	      In the Spring Boot App add SAMPLER code
	      @Bean
	      public AlwaysSampler alwaysSampler()
	       { return new AlwaysSampler() };

          Zipkin Server: ( UI http://localhost:9411/zipkin )
	  --------------
	  i) ZIPKIN Server (port 9411 )- centralized server for all logs (Sleuth pushes to zipkin server if configured)
	     dependencies to be added manually ( not available in initializer ) ( Zipkin UI & Zipkin Server ) + config client
	     a) version update to dalston and 1.5.2 as modules above
	     b)   <groupId>io.zipkin.java</groupId>
                   <artifactId>zipkin-server</artifactId>
	       
	          <groupId>io.zipkin.java</groupId>
                   <artifactId>zipkin-autoconfigure-ui</artifactId>
	  
	  ii) application.properties
              spring.application.name=zipkin-server
              server.port=9411  
	      
	  iii) @EnableZipkinServer to the spring boot app
       
	     
               
	  
Module 11: HYSTRIX for Fault tolerance
Module 12: Spring Cloud Config Server
           Spring Cloud BUS

           
           
           
           Order of Spawning the Microservices for all purposes
 1. EUREKA Discovery Naming Server
 2. Zuul - API Gateway Server
 3. SpringCloud ConfigServer
 4. ZIPKIN - Log Tracing Server
 
