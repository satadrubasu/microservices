Module Summary Notes practice
===============================

Module 1: Main Microservices Architecture and tools needed
   

Module 3:  Create microservice -> employee-service 
        1) https://start.spring.io/ ( Spring initializr )
          - Web/JPA/H2/Config-client/actuator/devtools
          - Update Pom for boot and cloud version compatibility
             Spring boot starter - 1.5.2.Release
             Spring cloud        - Dalston.RELEASE
     
        2) @RestController / @GetMapping / @PathVariable
           Controller and Model class --EmployeeController & Employee
           
        3) - Use JPA and mark the Model ans entity Bean
              @Entity
              @Column(name="column_name) / @Id
              constructor with fields
           
           - Create an Interface - Employee Repository
             public interface EmployeeRepository extends JpaRepository<Employee,Long> {}
               Long represents the ID Field of the Entity
               JpaRepository provides CRUD implementations
           
           - @GetMapping("/employee/{empId}")
	             public Employee getEployeeDetails(@PathVariable Long empId)
	                {
	                	return employeeRepository.findOne(empId); 
	                }
        4) data.sql with insert query to load into H2 DB
            insert into employee (emp_id,first_name,last_name,date_of_joining) values (101,'F001','L001',sysdate());

           
     
Module 3: Create microservice -> role-service
Module 4: Create composite microservice -> employee-payroll-service
Module 5: FEIGN Template ( Netflix ) Rest API calls
Module 6: RIBBON for Load balancing
Module 7: EUREKA for Naming Discovery Servier
Module 8: ZUUL API Gateway
          SLEUTH - How API gateway can also provide cross-cutting functionalities like Logging filters ( pre )
Module 9: ZIPKIN server for Distributed Tracing
          SLEUTH - SERVICE_NAME,SPANID,CORRELATIONID,false
Module 10: HYSTRIX for Fault tolerance
Module 11: Spring Cloud Config Server
           Spring Cloud BUS

           
           
           
           Order of Spawning the Microservices for all purposes
 1. EUREKA Discovery Naming Server
 2. Zuul - API Gateway Server
 3. SpringCloud ConfigServer
 4. ZIPKIN - Log Tracing Server
 
